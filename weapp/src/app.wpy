<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'

import { setStorageSync, getStorageSync } from 'components/storage'
import { stringifyUrlParams } from 'components/url-formater'
import request from 'components/request'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
    
      'pages/login',
    ],
    window: {
        
      backgroundTextStyle: 'dark',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '遇见小说',
      navigationBarTextStyle: 'black'
    },
  }

  globalData = {
    userInfo: null,
    loginQueue: [],
  }

  /**
     * 获取当前页地址
     * @return {[type]} [description]
     */
    getCurrentPageUrl() {
        let pages = getCurrentPages();
        let url;

        if (pages.length) {
            let curPage = pages[pages.length - 1];

            url =  `/${curPage.route}?${stringifyUrlParams(curPage.options)}`
        }

        return url;
    }

    constructor () {
        super();
        this.use('promisify');
        this.use('requestfix');

        this.intercept('request', {
            config (params) {
                // p.timestamp = +new Date();
                console.log('request params:', params);
                return params;
            },
            success (res) {
                console.log('request success:, res=', res);

                // 接口返回20004意味着登录态失效，重新授权
                if (res.data.state && res.data.state.code === 20004) {
                    setStorageSync('sid', 0, 1);
                    let currentPageUrl = this.getCurrentPageUrl();

                    if (currentPageUrl) {
                        wepy.redirectTo({
                            url: currentPageUrl
                        });
                    }
                }

                if (res.data) {
                    return res.data;
                }
                return res;
            },
            fail (e) {
                console.log('request error', e);
                return e;
            }
        });

    }

    onLaunch() {
        
    }

    login() {
        return new Promise((resolve, reject) => {
            this.globalData.loginQueue.push({
                resolve,
                reject,
            });

            console.info('[loginQueue]', this.globalData.loginQueue)

            if (this.globalData.loginQueue.length > 1) {
                return
            }

            // 检查登录session是否过期
            if (!getStorageSync('sid')) {
                this._doLogin();

            // 登录session未过期
            } else {
                // 判断登录状态是否过期
                wepy.checkSession().then(() => {
                    console.info('登录状态正常，不用重复登录！');
                    this.clearLoginQueue('resolve');
                }).catch(err => {
                    this._doLogin();
                });
            }
        });
    }

    async _doLogin() {
        wepy.showLoading({
            title: '加载中'
        });

        try {
            let loginRes = await wepy.login();
            if (loginRes.code) {
                let userInfoRes;

                try {
                    // 获取用户信息
                    userInfoRes = await wepy.getUserInfo();
                } catch (e) {
                    if (e.errMsg.indexOf('unauthorized') > -1) {
                        this.clearLoginQueue('reject')

                        let currentPageUrl = this.getCurrentPageUrl()
                        wepy.redirectTo({
                            url: `/pages/login?page=${encodeURIComponent(currentPageUrl)}`
                        });
                        return;
                    }

                    let scope = await wepy.getSetting();

                    // 判断用户信息权限
                    if (!scope.authSetting['scope.userInfo']) {
                        scope = await wepy.openSetting({
                            scope: 'scope.userInfo'
                        });

                        if (!scope.authSetting['scope.userInfo']) {
                            wepy.showToast({
                                title: '登录授权失败，登录需允许获取用户信息！',
                                icon: 'none'
                            });

                            throw Error('获取用户信息失败: 无获取用户信息权限！');
                        }

                        userInfoRes = await wepy.getUserInfo();
                    } else {
                        throw Error('获取用户信息失败. Error: ', e);
                    }
                }

                const { rawData, signature, iv, encryptedData } = userInfoRes;

                this.globalData.userInfo = userInfoRes.userInfo;


                // 登录授权
                let apiRes = await request({
                    url: '/weapp-user/user/weappAuth',
                    data: {
                        code: loginRes.code,
                        rawData,
                        signature,
                        iv,
                        encryptedData
                    }
                });

                // 保存sid, session状态保持
                if (apiRes && apiRes.state && apiRes.state.code === 0) {
                    const { sid, expires, campId } = apiRes.data;
                    // console.log('apiRes:', apiRes);

                    if (sid && expires) {
                        this.saveLoginSessionId(sid, expires);

                        this.clearLoginQueue('resolve');
                    } else {
                        throw Error(`授权登录失败！sid=${sid} expires=${expires}`);
                    }
                } else if(apiRes.state) {
                    throw Error('调用授权登录接口失败！ msg:' + apiRes.state.msg);
                }

                wepy.hideLoading();

            } else {
                throw Error('调用wx.login获取code失败！' + loginRes.errMsg);
            }
        } catch(err) {
            console.error('授权失败:', err);
            wepy.hideLoading();
            setTimeout(() => {
                this.clearLoginQueue('reject');
            }, 500);

        }
    }

     /**
     * 清空消费队列
     * @param {String} state 登录状态，成功:resolve，失败: reject
     */
     clearLoginQueue(state) {
         console.info('[clearLoginQueue]:', state);
         if (state === 'resolve') {
             // this.globalData.loginQueue.forEach(item => item.resolve());
             let len = this.globalData.loginQueue.length;
             if (len) {
                 this.globalData.loginQueue[len - 1].resolve();
             }
         } else {
             this.globalData.loginQueue.forEach(item => item.reject());
         }
         this.globalData.loginQueue = [];
     }

    /**
     * 本地存储sid，保持session状态（过期时间和服务端同步，2天）
     * @param  {[type]} sid     [description]
     * @param  {[type]} expires [description]
     * @return {[type]}         [description]
     */
    saveLoginSessionId(sid, expires) {
        setStorageSync('sid', sid, expires);
    }

    getUserInfo(cb) {
        if (this.globalData.userInfo) {
            return this.globalData.userInfo;
        }

        wepy.getUserInfo().then(res => {
            this.globalData.userInfo = res.userInfo;
            cb && cb(res.userInfo);
        })
    }
}
</script>
